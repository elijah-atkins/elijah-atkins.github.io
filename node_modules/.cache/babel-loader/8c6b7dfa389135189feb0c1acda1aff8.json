{"ast":null,"code":"var _jsxFileName = \"/Users/elijahatkins/Elijah/elijah-atkins.github.io/src/components/ContactForm.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\"; // DOCS: https://github.com/jquense/yup\n\nconst ContactForm = () => {\n  const blankForm = {\n    name: \"\",\n    email: \"\",\n    message: \"\"\n  };\n  const [message, setMessage] = useState(blankForm);\n  const [errors, setErrors] = useState(blankForm);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const formSchema = yup.object().shape({\n    name: yup.string().required(\"Name is a required field\"),\n    email: yup.string().email(\"must be a valid email address\").required(),\n    message: yup.string().required(\"Please enter a message\")\n  }); // inline validation, validating one key/value pair\n\n  const validateChange = e => {\n    yup.reach(formSchema, e.target.name) // get the value out of schema at key \"e.target.name\" --> \"name=\"\n    .validate(e.target.value) // value in input\n    .then(valid => {\n      // if passing validation, clear any error\n      setErrors({ ...errors,\n        [e.target.name]: \"\"\n      });\n    }).catch(err => {\n      // if failing validation, set error in state\n      console.log(\"error!\", err);\n      setErrors({ ...errors,\n        [e.target.name]: err.errors[0]\n      });\n    });\n  };\n\n  useEffect(() => {\n    formSchema.isValid(message).then(valid => {\n      setIsButtonDisabled(!valid);\n    });\n  }, [message, formSchema]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(\"message submitted\", message);\n    setMessage(blankForm);\n  };\n\n  const inputChange = e => {\n    e.persist();\n    const newMessage = { ...message,\n      [e.target.name]: e.target.value\n    };\n    validateChange(e); // for each change in input, do inline validation\n\n    setMessage(newMessage); // update state with new data\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"social\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Contact\"), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"contact-form\",\n    onSubmit: handleSubmit.bind(this),\n    method: \"POST\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    name: \"name\",\n    type: \"text\",\n    onChange: inputChange,\n    value: message.name,\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }), errors.name.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 47\n    }\n  }, errors.name) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"exampleInputEmail1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, \"Email address\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    onChange: inputChange,\n    value: message.email,\n    className: \"form-control\",\n    \"aria-describedby\": \"emailHelp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }), errors.email.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 48\n    }\n  }, errors.email) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \"Message\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"message\",\n    name: \"message\",\n    onChange: inputChange,\n    value: message.message,\n    className: \"form-control\",\n    rows: \"5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }), errors.message.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 50\n    }\n  }, errors.message) : null), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    disabled: isButtonDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, \"Submit\"))));\n};\n\nexport default ContactForm;","map":{"version":3,"sources":["/Users/elijahatkins/Elijah/elijah-atkins.github.io/src/components/ContactForm.jsx"],"names":["React","useState","useEffect","yup","ContactForm","blankForm","name","email","message","setMessage","errors","setErrors","isButtonDisabled","setIsButtonDisabled","formSchema","object","shape","string","required","validateChange","e","reach","target","validate","value","then","valid","catch","err","console","log","isValid","handleSubmit","preventDefault","inputChange","persist","newMessage","bind","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\"; // DOCS: https://github.com/jquense/yup\n\nconst ContactForm = () => {\n    const blankForm = {\n        name: \"\",\n        email: \"\",\n        message: \"\",\n    };\n    const [message, setMessage] = useState(blankForm);\n    const [errors, setErrors] = useState(blankForm);\n    const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n\n    const formSchema = yup.object().shape({\n        name: yup.string().required(\"Name is a required field\"),\n        email: yup.string().email(\"must be a valid email address\").required(),\n        message: yup.string().required(\"Please enter a message\"),\n    });\n\n    // inline validation, validating one key/value pair\n    const validateChange = e => {\n        yup\n            .reach(formSchema, e.target.name) // get the value out of schema at key \"e.target.name\" --> \"name=\"\n            .validate(e.target.value) // value in input\n            .then(valid => {\n                // if passing validation, clear any error\n                setErrors({ ...errors, [e.target.name]: \"\" });\n            })\n            .catch(err => {\n                // if failing validation, set error in state\n                console.log(\"error!\", err);\n                setErrors({ ...errors, [e.target.name]: err.errors[0] });\n            });\n    };\n\n    useEffect(() => {\n        formSchema.isValid(message).then(valid => {\n            setIsButtonDisabled(!valid);\n        });\n    }, [message, formSchema]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"message submitted\", message);\n        setMessage(blankForm);\n    };\n\n    const inputChange = (e) => {\n        e.persist();\n        const newMessage = { ...message, [e.target.name]: e.target.value };\n        validateChange(e); // for each change in input, do inline validation\n        setMessage(newMessage); // update state with new data\n    };\n\n\nreturn (\n    <div className=\"project-card\">\n        <div className=\"social\">\n            <h1>Contact</h1>\n            <form\n                id=\"contact-form\"\n                onSubmit={handleSubmit.bind(this)}\n                method=\"POST\"\n            >\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                        onChange={inputChange}\n                        value={message.name}\n                        className=\"form-control\"\n                    />\n                    {errors.name.length > 0 ? <p className=\"error\">{errors.name}</p> : null}\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                    <input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        onChange={inputChange}\n                        value={message.email}\n                        className=\"form-control\"\n                        aria-describedby=\"emailHelp\"\n                    />\n                    {errors.email.length > 0 ? <p className=\"error\">{errors.email}</p> : null}\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"message\">Message</label>\n                    <textarea\n                        id=\"message\"\n                        name=\"message\"\n                        onChange={inputChange}\n                        value={message.message}\n                        className=\"form-control\"\n                        rows=\"5\"\n                    ></textarea>\n                    {errors.message.length > 0 ? <p className=\"error\">{errors.message}</p> : null}\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={isButtonDisabled}>\n                    Submit\n          </button>\n            </form>\n        </div>\n    </div>\n);\n};\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}