{"ast":null,"code":"var _jsxFileName = \"/Users/elijahatkins/Elijah/elijah-atkins.github.io/src/components/ContactForm.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\"; // DOCS: https://github.com/jquense/yup\n\nimport * as emailjs from \"emailjs-com\";\n\nconst ContactForm = () => {\n  const blankForm = {\n    name: \"\",\n    email: \"\",\n    message: \"\"\n  };\n  const [message, setMessage] = useState(blankForm);\n  const [errors, setErrors] = useState(blankForm);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const formSchema = yup.object().shape({\n    name: yup.string().required(\"name is a required field\"),\n    email: yup.string().email(\"must be a valid email address\").required(\"email is a required field\"),\n    message: yup.string().required(\"please enter a message\")\n  }); // inline validation, validating one key/value pair\n\n  const validateChange = e => {\n    yup.reach(formSchema, e.target.name) // get the value out of schema at key \"e.target.name\" --> \"name=\"\n    .validate(e.target.value) // value in input\n    .then(valid => {\n      // if passing validation, clear any error\n      setErrors({ ...errors,\n        [e.target.name]: \"\"\n      });\n    }).catch(err => {\n      // if failing validation, set error in state\n      console.log(\"error!\", err);\n      setErrors({ ...errors,\n        [e.target.name]: err.errors[0]\n      });\n    });\n  };\n\n  useEffect(() => {\n    formSchema.isValid(message).then(valid => {\n      setIsButtonDisabled(!valid);\n    });\n  }, [message, formSchema]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let templateParams = {\n      from_name: message.email,\n      to_name: \"elijahorama@gmail.com\",\n      subject: message.name,\n      message_html: message.message\n    };\n    emailjs.send(\"gmail\", \"template_jD14FVvB\", templateParams, \"user_9uGgyjy7pkRZkqKCGG2wK\");\n    setMessage(blankForm);\n  };\n\n  const inputChange = e => {\n    e.persist();\n    const newMessage = { ...message,\n      [e.target.name]: e.target.value\n    };\n    validateChange(e); // for each change in input, do inline validation\n\n    setMessage(newMessage); // update state with new data\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"social\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Contact\"), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"contact-form\",\n    onSubmit: handleSubmit.bind(this),\n    method: \"POST\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    name: \"name\",\n    type: \"text\",\n    onChange: inputChange,\n    value: message.name,\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), errors.name.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, errors.name) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"exampleInputEmail1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"Email address\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    onChange: inputChange,\n    value: message.email,\n    className: \"form-control\",\n    \"aria-describedby\": \"emailHelp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), errors.email.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, errors.email) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"Message\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"message\",\n    name: \"message\",\n    onChange: inputChange,\n    value: message.message,\n    className: \"form-control-tall\",\n    rows: \"5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), errors.message.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, errors.message) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contact-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    disabled: isButtonDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"Submit\")))));\n};\n\nexport default ContactForm;","map":{"version":3,"sources":["/Users/elijahatkins/Elijah/elijah-atkins.github.io/src/components/ContactForm.jsx"],"names":["React","useState","useEffect","yup","emailjs","ContactForm","blankForm","name","email","message","setMessage","errors","setErrors","isButtonDisabled","setIsButtonDisabled","formSchema","object","shape","string","required","validateChange","e","reach","target","validate","value","then","valid","catch","err","console","log","isValid","handleSubmit","preventDefault","templateParams","from_name","to_name","subject","message_html","send","inputChange","persist","newMessage","bind","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\"; // DOCS: https://github.com/jquense/yup\nimport * as emailjs from \"emailjs-com\";\n\nconst ContactForm = () => {\n  const blankForm = {\n    name: \"\",\n    email: \"\",\n    message: \"\",\n  };\n  const [message, setMessage] = useState(blankForm);\n  const [errors, setErrors] = useState(blankForm);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n\n  const formSchema = yup.object().shape({\n    name: yup.string().required(\"name is a required field\"),\n    email: yup\n      .string()\n      .email(\"must be a valid email address\")\n      .required(\"email is a required field\"),\n    message: yup.string().required(\"please enter a message\"),\n  });\n\n  // inline validation, validating one key/value pair\n  const validateChange = (e) => {\n    yup\n      .reach(formSchema, e.target.name) // get the value out of schema at key \"e.target.name\" --> \"name=\"\n      .validate(e.target.value) // value in input\n      .then((valid) => {\n        // if passing validation, clear any error\n        setErrors({ ...errors, [e.target.name]: \"\" });\n      })\n      .catch((err) => {\n        // if failing validation, set error in state\n        console.log(\"error!\", err);\n        setErrors({ ...errors, [e.target.name]: err.errors[0] });\n      });\n  };\n\n  useEffect(() => {\n    formSchema.isValid(message).then((valid) => {\n      setIsButtonDisabled(!valid);\n    });\n  }, [message, formSchema]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    let templateParams = {\n      from_name: message.email,\n      to_name: \"elijahorama@gmail.com\",\n      subject: message.name,\n      message_html: message.message,\n    };\n\n    emailjs\n      .send(\n        \"gmail\",\n        \"template_jD14FVvB\",\n        templateParams,\n        \"user_9uGgyjy7pkRZkqKCGG2wK\"\n      )\n\n    setMessage(blankForm);\n  };\n\n  const inputChange = (e) => {\n    e.persist();\n    const newMessage = { ...message, [e.target.name]: e.target.value };\n    validateChange(e); // for each change in input, do inline validation\n    setMessage(newMessage); // update state with new data\n  };\n\n  return (\n    <div className=\"project-card\">\n      <div className=\"social\">\n        <h1>Contact</h1>\n\n        <form\n          id=\"contact-form\"\n          onSubmit={handleSubmit.bind(this)}\n          method=\"POST\"\n        >\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              onChange={inputChange}\n              value={message.name}\n              className=\"form-control\"\n            />\n            {errors.name.length > 0 ? (\n              <p className=\"error\">{errors.name}</p>\n            ) : null}\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Email address</label>\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              onChange={inputChange}\n              value={message.email}\n              className=\"form-control\"\n              aria-describedby=\"emailHelp\"\n            />\n            {errors.email.length > 0 ? (\n              <p className=\"error\">{errors.email}</p>\n            ) : null}\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"message\">Message</label>\n            <textarea\n              id=\"message\"\n              name=\"message\"\n              onChange={inputChange}\n              value={message.message}\n              className=\"form-control-tall\"\n              rows=\"5\"\n            ></textarea>\n            {errors.message.length > 0 ? (\n              <p className=\"error\">{errors.message}</p>\n            ) : null}\n          </div>\n          <div className=\"contact-button\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={isButtonDisabled}\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}